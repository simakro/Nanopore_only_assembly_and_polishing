
EXPERIMENTS = ["SM0014_HCMV_Voigt_fastq_pass"]
BARCODES = [
    "barcode01",
    "barcode02",
    "barcode03",
    "barcode04",
    "barcode05",
    "barcode06",
    "barcode07",
    "barcode08",
    "barcode09",
    ]
ASSEMBLERS = ["canu", "flye"]


def get_draft_asm(wildcards):
    if wildcards.assembler == "canu":
        # print("Assembler = Canu")
        return f"results/{wildcards.experiment}/{wildcards.barcode}/{wildcards.assembler}/{wildcards.experiment}_{wildcards.barcode}_canu.contigs.fasta"
    elif wildcards.assembler == "flye":
        # print("Assembler = Flye")
        return f"results/{wildcards.experiment}/{wildcards.barcode}/flye/assembly.fasta"
    else:
        print("WARNING: No assembler in wildcards. Defaulting to canu.")
        return "canu"


rule all:
    input:
        # expand("results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb/{experiment}_{barcode}_{assembler}_prokka_genusdb.tsv", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk/{experiment}_{barcode}_{assembler}_prokka_protgbk.tsv", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{barcode}/homopolish_medaka_{assembler}/consensus_homopolished.fasta", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_herpesviridae_odb10/short_summary.json", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS)


rule preprocessing:
    input:
        "data/{experiment}/{barcode}"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all.fastq"
    log:
        "logs/{experiment}/{barcode}/preprocessing.log"
    conda:
        "envs/python3.yaml"
    shell:
        "python scripts/preprocessing.py {input} {wildcards.experiment} {output} 2>&1 > {log}"


rule filter_readlength:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all.fastq"
    params:
        minlen="20000"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sizefilt.fastq"
    log:
        "logs/{experiment}/{barcode}/size_filter.log"
    conda:
        "envs/bbmap.yaml"
    shell:
        "bbduk.sh in={input} out={output} minlen={params.minlen} 2>&1 > {log}"


rule filter_readqual:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sizefilt.fastq"
    params:
        minqual="14"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fastq"
    log:
        "logs/{experiment}/{barcode}/qual_filter.log"
    conda:
        "envs/bbmap.yaml"
    shell:
        "bbduk.sh in={input} out={output} maq={params.minqual} 1> {log}"


rule porechop_barcodes_and_adapters:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fastq"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    log:
        "logs/{experiment}/{barcode}/porechop.log"
    conda:
        "envs/porechop.yaml"
    shell:
        "porechop -i {input} -o {output} 2>&1 > {log}"


rule assemble_canu:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    output:
        outdir=directory("results/{experiment}/{barcode}/canu"),
        contigs="results/{experiment}/{barcode}/canu/{experiment}_{barcode}_canu.contigs.fasta"
    params:
        genomeSize=230000,
        useGrid="False"
    # threads:
    #     16
    log:
        "logs/{experiment}/{barcode}/canu.log"
    conda:
        "envs/canu.yaml"
    shell:
        "canu -nanopore {input} -p {wildcards.experiment}_{wildcards.barcode}_canu -d {output.outdir} genomeSize={params.genomeSize} useGrid={params.useGrid} 2>&1 > {log}"


# rule polish_canu_nextpolish:
#     input:
#         reads="results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta",
#         draft_asm="results/{experiment}/{barcode}/canu/{experiment}_{barcode}_canu.contigs.fasta"
#     output:
#         outdir=directory("results/{experiment}/{barcode}/medaka_canu"),
#         consensus="results/{experiment}/{barcode}/medaka_canu/consensus.fasta"
#     log:
#         "logs/{experiment}/{barcode}/medaka_canu.log"
#     threads:
#         16
#     conda:
#         "envs/medaka.yaml"
#     shell:
#         "medaka_consensus -i {input.reads} -d {input.draft_asm} -o {output.outdir} -t {threads} 2>&1 > {log}"


rule assemble_flye:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    output:
        outdir=directory("results/{experiment}/{barcode}/flye"),
        outfile="results/{experiment}/{barcode}/flye/assembly.fasta"
    params:
        genomeSize=230000,
        useGrid="False"
    threads:
        16
    log:
        "logs/{experiment}/{barcode}/canu.log"
    conda:
        "envs/flye.yaml"
    shell:
        "flye --nano-hq {input} -o {output.outdir} -g {params.genomeSize} -t {threads} 2>&1 > {log}"


rule polish_medaka:
    input:
        reads="results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta",
        draft_asm=get_draft_asm
    output:
        outdir=directory("results/{experiment}/{barcode}/medaka_{assembler}"),
        consensus="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta"
    log:
        "logs/{experiment}/{barcode}/medaka_{assembler}.log"
    threads:
        16
    conda:
        "envs/medaka.yaml"
    shell:
        "medaka_consensus -i {input.reads} -d {input.draft_asm} -o {output.outdir} -t {threads} 2>&1 > {log}"


rule homopolish: # Reference guided/based polishing without read information and may conceal variants! Assumes close homology (hence the name) between ref and sample.
    input:
        asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
        ref="resources/KP202868.1_Murid_herpesvirus_8_isolate_Berlin.fa"
    output:
        outdir = directory("results/{experiment}/{barcode}/homopolish_medaka_{assembler}"),
        outfile= "results/{experiment}/{barcode}/homopolish_medaka_{assembler}/consensus_homopolished.fasta"
    log:
        "logs/{experiment}/{barcode}/medaka_{assembler}_homopolish.log"
    threads:
        16
    conda:
        "envs/homopolish.yaml"
    shell:
        "homopolish polish -a {input.asm} -l {input.ref} -m R9.4.pkl -o {output.outdir} -t {threads} 2>&1 > {log}"


rule prokka:
    input:
        asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
        prot_gbk="data/KP202868.1_Murid_herpesvirus_8_isolate_Berlin.gbk"
    output:
        genusdb_dir=directory("results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb"),
        protgbk_dir=directory("results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk"),
        genus_tsv="results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb/{experiment}_{barcode}_{assembler}_prokka_genusdb.tsv",
        protg_tsv="results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk/{experiment}_{barcode}_{assembler}_prokka_protgbk.tsv"
    log:
        "logs/{experiment}/{barcode}/prokka_medaka_{assembler}.log"
    conda:
        "envs/prokka.yaml"
    shell:
        "prokka --kingdom Viruses --genus Muromegalovirus {input.asm} --usegenus --outdir {output.genusdb_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_genusdb --force && " #  --addgenes --rawproduct
        "prokka --kingdom Viruses --protein {input.prot_gbk} {input.asm} --outdir {output.protgbk_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_protgbk --force" # --genus Muromegalovirus --rawproduct


rule busco:
    input:
        asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta"
    output:
        outdir=directory("results/{experiment}/{barcode}/busco_medaka_{assembler}"),
        outfile="results/{experiment}/{barcode}/busco_medaka_{assembler}/run_herpesviridae_odb10/short_summary.json"
    log:
        "logs/{experiment}/{barcode}/prokka_medaka_{assembler}.log"
    conda:
        "envs/busco.yaml"
    shell:
        "busco -i {input.asm} -l herpesviridae -o {output.outdir} -m genome -f"
