import os
import json

# EXPERIMENTS = ["SM0014_HCMV_Voigt_fastq_pass"]
# EXPERIMENTS = ["SM0026_bacterial_genomes_KP"]
EXPERIMENTS = "SM0026_bacterial_genomes_KP"
BARCODES = [
    # "barcode01",
    "barcode02",
    # "barcode03",
    # "barcode04",
    # "barcode05",
    # "barcode06",
    # "barcode07",
    # "barcode08",
    # "barcode09",
    ]
SAMPLE_INFO = {
    "barcode02": {
        "name": "AP4a_Alicyclobacillus", 
        "ref": "GCF_022674245.1_Alicyclobacillus_acidoterrestris_strain_DSM3922.fna",
        "genus": "Alicyclobacillus",
        "species": "acidoterrestris",
        "illumina": [
            "A2D2/A2D2_FKDN230265268-1A_HCFGLDRX3_L2_1.fq.gz",
            "A2D2/A2D2_FKDN230265268-1A_HCFGLDRX3_L2_2.fq.gz"
            ]
        }
}
# BARCODES = ["test1", "test2"]
ASSEMBLERS = ["flye"] # "canu"
#  GENOME_SIZE = 210000
GENOME_SIZE = 3000000
COVERAGE = 50
# REFERENCE = "KP202868.1_Murid_herpesvirus_8_isolate_Berlin"
# REFERENCE = "GCF_000024285.1_ASM2428v1_genomic_Alicyclobacillus_acidocaldarius"
REFERENCES = [SAMPLE_INFO[barcode]["ref"] for barcode in SAMPLE_INFO]
# REFERENCE, REF_EXT = ".".join(REFERENCE.split(".")[:-1]), REFERENCE.split(".")[-1]
# BUSCO_GENUS = "herpesviridae"
BUSCO_GENUS = "bacteria"
PILON_ITERATIONS = 1


# def get_ref_path(wildcards):
#     os.path.join(["resources", )
#     return f"resources/{EXPERIMENTS}/{REFERENCE}.{REF_EXT}"


def get_ref_proteins(wildcards): # adapt to also accept .gb (which is same format as gbk) extensioon and .faa which is a different pure protein format usable for prokka --proteins
    reference = SAMPLE_INFO[wildcards.barcode]["ref"]
    comp_ext = [".gbk", ".gb", ".faa"]
    prot_files = [f'{(".").join(reference.split(".")[:-1])}{ext}' for ext in comp_ext]
    res_dir = os.path.join("resources", wildcards.experiment)
    res_files = [entry.name for entry in os.scandir(res_dir)]
    avail_prot = [f for f in prot_files if f in res_files][0]
    # ref_path = os.path.join("resources", wildcards.experiment, SAMPLE_INFO[wildcards.barcode]["ref"])
    prot_path = os.path.join(res_dir, avail_prot)
    return prot_path


def get_draft_asm(wildcards):
    print("Assembler:", wildcards.assembler)
    if wildcards.assembler == "canu":
        print(f"results/{wildcards.experiment}/{wildcards.barcode}/canu/{wildcards.experiment}_{wildcards.barcode}_canu.contigs.fasta")
        # return f"results/{wildcards.experiment}/{wildcards.barcode}/{wildcards.assembler}/{wildcards.experiment}_{wildcards.barcode}_canu.contigs.fasta"
        return f"results/{wildcards.experiment}/{wildcards.barcode}/canu/{wildcards.experiment}_{wildcards.barcode}_canu.contigs.fasta"
    elif wildcards.assembler == "flye":
        # print("Assembler = Flye")
        print(f"results/{wildcards.experiment}/{wildcards.barcode}/flye/assembly.fasta")
        return f"results/{wildcards.experiment}/{wildcards.barcode}/flye/assembly.fasta"
    else:
        print("WARNING: No assembler in wildcards. Defaulting to canu.")
        return "canu"


def get_prokka_genus(wildcards):
    return SAMPLE_INFO[wildcards.barcode]["genus"]


def get_prokka_species(wildcards):
    return SAMPLE_INFO[wildcards.barcode]["species"]


def get_len_filt_param(wildcards):
    param_json = f"results/{wildcards.experiment}/{wildcards.barcode}/filt_params.json"
    with open(param_json, "r") as paraj:
        data = paraj.read()
        param_dct = json.loads(data)
        print(param_dct.items())
    return param_dct["len"]


def get_qual_filt_param(wildcards):
    param_json = f"results/{wildcards.experiment}/{wildcards.barcode}/filt_params.json"
    with open(param_json, "r") as paraj:
        data = paraj.read()
        param_dct = json.loads(data)
        print(param_dct.items())
    return param_dct["qual"]


def get_busco_graph_outdir(wildcards):
    # return os.path.split(wildcards.input)[0]
    # outdir = f"results/{wildcards.experiment}/busco_graph_{wildcards.assembler}"
    outdir = f"results/{wildcards.experiment}/busco_graph"
    if not os.path.exists(f"results/{wildcards.experiment}"):
       os.mkdir(f"results/{wildcards.experiment}")
    if not os.path.exists(outdir):
       os.mkdir(outdir)
    print(outdir)
    return outdir


def get_ilmn_reads(wildcards):
    files = SAMPLE_INFO[wildcards.barcode]["illumina"]
    path = os.path.join("data", wildcards.experiment, "short-reads")
    paths = [os.path.join(path, f) for f in files]
    # both_space_sep = f"{paths[0]} {paths[1]}" # surprisingly returning the paths-list appears to work as input for all cli commands; possibly snakemake already handles converting them in space seperated strings?
    return paths



rule all:
    input:
        # # expand("results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        #! expand("results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb/{experiment}_{barcode}_{assembler}_prokka_genusdb.tsv", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk/{experiment}_{barcode}_{assembler}_prokka_protgbk.tsv", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        # expand("results/{experiment}/{barcode}/homopolish_medaka_{assembler}/consensus_homopolished.fasta", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        # # expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_herpesviridae_odb10/short_summary.json", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        expand("results/{experiment}/{reference}/run_{genus}_odb10/short_summary.specific.{reference}.txt", experiment=EXPERIMENTS, reference=REFERENCES, genus=BUSCO_GENUS),
        expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_{genus}_odb10/short_summary.specific.{barcode}.txt", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS, genus=BUSCO_GENUS),
        # expand("results/{experiment}/busco_graph_{assembler}/busco_figure.png", experiment=EXPERIMENTS, assembler=ASSEMBLERS)
        # # expand("results/{experiment}/{barcode}/filt_params.json", experiment=EXPERIMENTS, barcode=BARCODES)
        # f"results/{REFERENCE}/run_alicyclobacillus_odb10/short_summary.json",
        expand("results/{experiment}/busco_graph/busco_figure.png", experiment=EXPERIMENTS, assembler=ASSEMBLERS),
        # expand("results/{experiment}/{barcode}/medaka_{assembler}_bwa/idx1_aln_ilm_{experiment}_{barcode}.bam.sort", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS),
        # expand("results/{experiment}/{barcode}/medaka_{assembler}_pilon{iteration}/medaka_{assembler}_pilon{iteration}.fasta", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS, iteration=PILON_ITERATIONS),
        expand("results/{experiment}/{barcode}/ilmn_fastqc_before/fastqc_complete.flag", experiment=EXPERIMENTS, barcode=BARCODES),
        expand("results/{experiment}/{barcode}/ilmn_fastqc_after/fastqc_complete.flag", experiment=EXPERIMENTS, barcode=BARCODES)


rule preprocessing:
    input:
        "data/{experiment}/{barcode}"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all.fastq"
    log:
        "logs/{experiment}/{barcode}/preprocessing.log"
    conda:
        "envs/python3.yaml"
    shell:
        "python scripts/preprocessing.py {input} {wildcards.experiment} {output} 2>&1 > {log}"


rule opt_read_filter:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all.fastq"
    params:
        genSize = GENOME_SIZE,
        cov= COVERAGE
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fastq"
    log:
        "logs/{experiment}/{barcode}/filter_optimization.log"
    conda:
        "envs/python3.yaml"
    shell:
        "python scripts/select_filter_params_by_cov.py -f {input} -s {params.genSize} -c {params.cov} --dump fastq -decall" #2>&1 > {log}


# maybe implement a rule including trimming of 10 bases at start and end of each
# read for quality trimming without individual examination; bulk examination has
# shown that the first 10 bases at start and end are of significantly lower qual
# ity than the rest; However, such a step would inevitable lead to the loss of
# at least that amount of bases at the start and end of the assembly for linear 
# genomes

rule porechop_barcodes_and_adapters:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fastq"
    output:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    log:
        "logs/{experiment}/{barcode}/porechop.log"
    conda:
        "envs/porechop.yaml"
    shell:
        "porechop -i {input} -o {output} 2>&1 > {log}"


rule assemble_canu:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    output:
        outdir=directory("results/{experiment}/{barcode}/canu"),
        contigs="results/{experiment}/{barcode}/canu/{experiment}_{barcode}_canu.contigs.fasta",
        flag = "results/{experiment}/{barcode}/canu/canu.flag"
    params:
        genomeSize=GENOME_SIZE,
        useGrid="False"
    threads:
        16
    log:
        "logs/{experiment}/{barcode}/canu.log"
    conda:
        "envs/canu.yaml"
    shell:
        "canu -nanopore {input} -p {wildcards.experiment}_{wildcards.barcode}_canu -d {output.outdir} genomeSize={params.genomeSize} maxThreads={threads} useGrid={params.useGrid} 2>&1 > {log} && touch {output.flag}"


rule assemble_flye:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta"
    output:
        outdir=directory("results/{experiment}/{barcode}/flye"),
        outfile="results/{experiment}/{barcode}/flye/assembly.fasta",
        flag = "results/{experiment}/{barcode}/flye/flye.flag"
    params:
        genomeSize=230000,
        useGrid="False"
    threads:
        16
    log:
        "logs/{experiment}/{barcode}/canu.log"
    conda:
        "envs/flye.yaml"
    shell:
        "flye --nano-hq {input} -o {output.outdir} -g {params.genomeSize} -t {threads} 2>&1 > {log} && touch {output.flag}"


rule polish_medaka:
    input:
        reads="results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta",
        asm_flag = "results/{experiment}/{barcode}/{assembler}/{assembler}.flag",
        draft_asm = get_draft_asm
    output:
        consensus="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta"
    params:
        outdir="results/{experiment}/{barcode}/medaka_{assembler}"
    log:
        "logs/{experiment}/{barcode}/medaka_{assembler}.log"
    threads:
        16
    conda:
        "envs/medaka.yaml"
    shell:
        "medaka_consensus -i {input.reads} -d {input.draft_asm} -o {params.outdir} -t {threads} 2>&1 > {log}"


# rule homopolish: # Reference guided/based polishing without read information and may conceal variants! Assumes close homology (hence the name) between ref and sample.
#     input:
#         asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
#         # ref="resources/KP202868.1_Murid_herpesvirus_8_isolate_Berlin.fa"
#         ref= "resources/{experiment}/{reference}"
#     output:
#         outdir = directory("results/{experiment}/{barcode}/homopolish_medaka_{assembler}"),
#         outfile= "results/{experiment}/{barcode}/homopolish_medaka_{assembler}/consensus_homopolished.fasta"
#     log:
#         "logs/{experiment}/{barcode}/medaka_{assembler}_homopolish.log"
#     threads:
#         16
#     conda:
#         "envs/homopolish.yaml"
#     shell:
#         "homopolish polish -a {input.asm} -l {input.ref} -m R9.4.pkl -o {output.outdir} -t {threads} 2>&1 > {log}"


rule prokka:
    input:
        asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
        # prot_gbk="resources/KP202868.1_Murid_herpesvirus_8_isolate_Berlin.gbk"
        # prot_gbk=f"resources/{experiment}/{REFERENCE}.gbk"
        # ref="results/{experiment}/{reference}",
        prot_file=get_ref_proteins
    output:
        # genusdb_dir=directory("results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb"),
        protgbk_dir=directory("results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk"),
        # genus_tsv="results/{experiment}/{barcode}/prokka_medaka_{assembler}_genusdb/{experiment}_{barcode}_{assembler}_prokka_genusdb.tsv",
        protg_tsv="results/{experiment}/{barcode}/prokka_medaka_{assembler}_protgbk/{experiment}_{barcode}_{assembler}_prokka_protgbk.tsv"
    params:
        genus=get_prokka_genus,
        species=get_prokka_species
    log:
        "logs/{experiment}/{barcode}/prokka_medaka_{assembler}.log"
    conda:
        "envs/prokka.yaml"
    shell:
        # "prokka --kingdom Viruses --genus Muromegalovirus {input.asm} --usegenus --outdir {output.genusdb_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_genusdb --force && " #  --addgenes --rawproduct
        # "prokka --kingdom Viruses --protein {input.prot_gbk} {input.asm} --outdir {output.protgbk_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_protgbk --force" # --genus Muromegalovirus --rawproduct
        # "prokka --kingdom Bacteria --genus {params.genus} --species {params.species} {input.asm} --usegenus --outdir {output.genusdb_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_genusdb --force && " 
        "prokka --proteins {input.prot_file} {input.asm} --outdir {output.protgbk_dir} --prefix {wildcards.experiment}_{wildcards.barcode}_{wildcards.assembler}_prokka_protgbk --force 2>&1 > {log}"


rule busco_nanopore:
    input:
        asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta"
    output:
        outfile="results/{experiment}/{barcode}/busco_medaka_{assembler}/run_bacteria_odb10/short_summary.specific.{barcode}.txt"
    params:
        outdir="results/{experiment}/{barcode}/busco_medaka_{assembler}",
        genus=BUSCO_GENUS,
        tmp_out="results/{experiment}/{barcode}/busco_medaka_{assembler}/run_bacteria_odb10/short_summary.txt",
        summary_dir=get_busco_graph_outdir
    log:
        "logs/{experiment}/{barcode}/busco_medaka_{assembler}.log"
    conda:
        "envs/busco.yaml"
    shell:
        "busco -i {input.asm} -l {params.genus} -o {params.outdir} -m genome -f && mv {params.tmp_out} {output.outfile} 2>&1 > {log} && cp {output.outfile} {params.summary_dir}"


rule busco_reference:
    input:
        # expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_{genus}_odb10/short_summary.txt", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS, genus=BUSCO_GENUS),
        # ef_genome = get_ref_path,
        # exp_folder = "results/{experiment}/{ref_name}",
        ref_genome = "resources/{experiment}/{ref_name}" # .fna
    params:
        genus=BUSCO_GENUS,
        tmp_out="results/{experiment}/{ref_name}/run_bacteria_odb10/short_summary.txt",
        summary_dir=get_busco_graph_outdir,
        outdir=directory("results/{experiment}/{ref_name}")
        # ref_name=REFERENCE
    output:
        # outdir=directory("results/{experiment}/{ref_name}"),
        outfile="results/{experiment}/{ref_name}/run_bacteria_odb10/short_summary.specific.{ref_name}.txt"
    conda:
        "envs/busco.yaml"
    shell:
        "busco -i {input.ref_genome} -l {params.genus} -o {params.outdir} -m genome -f && mv {params.tmp_out} {output.outfile} && cp {output.outfile} {params.summary_dir}"


rule busco_generate_plot:
    input:
        # ref_inf="results/{experiment}/busco_graph_{assembler}/short_summary.specific.herpesviridae_odb10.MuridHerpesvirus_8_Berlin.txt",
        # ref_inf="results/{experiment}/busco_graph_{assembler}/short_summary.specific.{BUSCO_GENUS}_odb10.{REFERENCE}.txt",
        # expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_{genus}_odb10/short_summary.txt", experiment=EXPERIMENTS, barcode=BARCODES, assembler=ASSEMBLERS, genus=BUSCO_GENUS),
        expand("results/{experiment}/{barcode}/busco_medaka_{assembler}/run_{genus}_odb10/short_summary.specific.{barcode}.txt", experiment=EXPERIMENTS, assembler=ASSEMBLERS, reference=REFERENCES, genus=BUSCO_GENUS, barcode=BARCODES) #,
    output:
        # outdir=directory("results/{experiment}/busco_graph_{assembler}"),
        "results/{experiment}/busco_graph/busco_figure.png",
        # outdir = get_busco_graph_outdir,
    params:
        outdir = get_busco_graph_outdir
    conda:
        "envs/busco.yaml"
    shell:
        "python scripts/busco_generate_plot.py -wd {params.outdir}"


rule fastqc_illumina_before:
    input:
        "results/{experiment}/{barcode}/{experiment}_{barcode}_all_sqfilt.fasta", # this is not required as input for fastqc, but supplies the necessary wildcards and ensures 
        ilmn_reads=get_ilmn_reads
    output:
        "results/{experiment}/{barcode}/ilmn_fastqc_before/fastqc_complete.flag"
    params:
        outdir="results/{experiment}/{barcode}/ilmn_fastqc_before"
    conda:
        "envs/fastqc.yaml"
    shell:
        "mkdir -p {params.outdir} && "
        "fastqc {input.ilmn_reads} -o {params.outdir} && "
        "touch {params.outdir}/fastqc_complete.flag"


# potential tools for adapter clipping/trimming: Scythe, Trimmomatic, cutadapt
# adapter clipping tested and discarded: trim_galore (wrapping cutadapt together with fastqc)

# potential tools for quality trimming: Sickle, Trimmomatic, 

# rule clip_adapters_scythe:
#     input:
#         "results/{experiment}/{barcode}/ilmn_fastqc/fastqc_complete.flag", # this is not required as input for fastqc, but supplies the necessary wildcards and ensures 
#         ilmn_reads=get_ilmn_reads
#     output:
#     params:
#         outdir="results/{experiment}/{barcode}/trim_scythe",
#         adapters=""
#     conda:
#         "envs/scythe.yaml"
#     shell:
#         "scythe -a {params.adapters} -o {input.ilmn_reads}"
#         # "fastqc {input.ilmn_reads} -o {params.outdir}"


rule clip_adapters_sm:
    input:
        "results/{experiment}/{barcode}/ilmn_fastqc_before/fastqc_complete.flag", # this is not required as input for fastqc, but supplies the necessary wildcards and ensures 
        ilmn_reads=get_ilmn_reads
    output:
        "results/{experiment}/{barcode}/ilmn_fastqc_after/fastqc_complete.flag"
    params:
        outdir="results/{experiment}/{barcode}/clip_ilmn_sm",
        adapters="resources/adapters_all_trimmomatic_condensed.fasta"
    conda:
        "envs/fastqc.yaml"
    shell:
        "python3 scripts/identify_and_clip_ilmn_adapters.py -a {params.adapters} -o {params.outdir} -r {input.ilmn_reads} && "
        "fastqc {input.ilmn_reads} -o {params.outdir} && "
        "touch  results/{wildcards.experiment}/{wildcards.barcode}/ilmn_fastqc_after/fastqc_complete.flag"


rule bwa_mem_1:
    input:
        raw_asm="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
        # ilmn_r1,ilmn_r2=get_ilmn_reads
        ilmn_reads=get_ilmn_reads
    output:
        "results/{experiment}/{barcode}/medaka_{assembler}_bwa/idx1_aln_ilm_{experiment}_{barcode}.bam.sort"#,
        # outdir=directory("results/{experiment}/{barcode}/medaka_{assembler}/bwa")
    params:
        threads=16,
        prefix="idx1_medaka_{assembler}_{experiment}_{barcode}",
        sam_file="idx1_aln_ilm_{experiment}_{barcode}.sam",
        outdir="results/{experiment}/{barcode}/medaka_{assembler}_bwa",
        bam="results/{experiment}/{barcode}/medaka_{assembler}_bwa/idx1_aln_ilm_{experiment}_{barcode}.bam"
    conda:
        "envs/bwa-mem2.yaml"
    log:
        "logs/{experiment}/{barcode}/bwa-mem-1_medaka_{assembler}.log"
    shell:
        "mkdir -p {params.outdir} && "
        "bwa-mem2 index {input.raw_asm} -p {params.prefix} && "
        "bwa-mem2 mem -t {params.threads} {params.prefix} {input.ilmn_reads} > {params.sam_file} && " # {input.ilmn_r1} {input.ilmn_r2}
        "samtools view -hbS {params.sam_file} > {params.bam} && "
        "samtools sort {params.bam} > {output} && "
        "samtools index {output} && "
        # "mv {params.prefix}.bam results/{wildcards.experiment}/{wildcards.barcode}/medaka_{wildcards.assembler} && " # this is just to test if the pilon WARNING that bam.bai index is older then BAM is related to moving the files around and getting new time stamps
        "mv {params.prefix}* results/{wildcards.experiment}/{wildcards.barcode}/medaka_{wildcards.assembler} && "
        "mv {params.sam_file} {params.outdir} 2>&1 > {log}"


rule pilon:
    input:
        genome="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
        bam="results/{experiment}/{barcode}/medaka_{assembler}_bwa/idx{iteration}_aln_ilm_{experiment}_{barcode}.bam.sort"
    output:
        "results/{experiment}/{barcode}/medaka_{assembler}_pilon{iteration}/medaka_{assembler}_pilon{iteration}.fasta"
    params:
        prefix="medaka_{assembler}_pilon{iteration}",
        outdir="results/{experiment}/{barcode}/medaka_{assembler}_pilon{iteration}"
    conda:
        "envs/pilon.yaml"
    log:
        "logs/{experiment}/{barcode}/pilon-{iteration}_medaka_{assembler}.log"
    shell:
        "pilon -Xmx16G --genome {input.genome} --bam {input.bam} --output {params.prefix} --outdir {params.outdir} 2>&1 > {log}"
    

# rule dnadiff:
#     input:
#         genome="results/{experiment}/{barcode}/medaka_{assembler}/consensus.fasta",
#         bam="results/{experiment}/{barcode}/medaka_{assembler}_bwa/idx{iteration}_aln_ilm_{experiment}_{barcode}.bam.sort"
#     output:
#         "results/{experiment}/{barcode}/medaka_{assembler}_pilon{iteration}/medaka_{assembler}_pilon{iteration}.fasta"
#     params:
#         prefix="medaka_{assembler}_pilon{iteration}",
#         outdir="results/{experiment}/{barcode}/medaka_{assembler}_pilon{iteration}"
#     conda:
#         "envs/pilon.yaml"
#     log:
#         "logs/{experiment}/{barcode}/pilon-{iteration}_medaka_{assembler}.log"
#     shell:
#         "pilon -Xmx16G --genome {input.genome} --bam {input.bam} --output {params.prefix} --outdir {params.outdir} 2>&1 > {log}"

